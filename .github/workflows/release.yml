name: Release

on:
  workflow_dispatch:

concurrency: Release

jobs:
  set-release-version:
    if: github.repository_owner == 'Informatievlaanderen'
    name: Decide next version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
          persist-credentials: false

    - name: Setup Node.js
      uses: actions/setup-node@v3.5.1

    - name: Node version
      shell: bash
      run: node --version

    - name: Install NPM dependencies
      shell: bash
      run: npm ci

    - name: Run Semantic Release Dry-Run
      shell: bash
      run: npx semantic-release --dry-run
      env:
        BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
        GITHUB_TOKEN: ${{ secrets.VBR_GIT_RELEASE_TOKEN }}
        GIT_COMMIT: ${{ github.sha }}
        GIT_USERNAME: ${{ secrets.VBR_GIT_USER }}
        GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}

    - name: Set Release Version
      id: set-version
      run: |
        [ ! -f semver ] && echo none > semver
        echo $(cat semver)
        echo ::set-output name=version::$(cat semver)
        echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
      shell: bash

  build-api-legacy:
    name: Build Api Legacy
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: postal-registry
      build-target: Containerize_ApiLegacy
      image-file: pr-api-legacy-image.tar
      image-name: api-legacy
      test-project: PostalRegistry.Tests
      build-project: PostalRegistry.Api.Legacy
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-api-oslo:
    name: Build Api Oslo
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: postal-registry
      build-target: Containerize_ApiOslo
      image-file: pr-api-oslo-image.tar
      image-name: api-oslo
      test-project: PostalRegistry.Tests
      build-project: PostalRegistry.Api.Oslo
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-api-crab-import:
    name: Build Api CrabImport
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: postal-registry
      build-target: Containerize_ApiCrabImport
      image-file: pr-api-crab-import-image.tar
      image-name: api-crab-import
      test-project: PostalRegistry.Tests
      build-project: PostalRegistry.Api.CrabImport
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-api-extract:
    name: Build Api Extract
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: postal-registry
      build-target: Containerize_ApiExtract
      image-file: pr-api-extract-image.tar
      image-name: api-extract
      test-project: PostalRegistry.Tests
      build-project: PostalRegistry.Api.Extract
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-projector:
    name: Build Projector
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: postal-registry
      build-target: Containerize_Projector
      image-file: pr-projector-image.tar
      image-name: projector
      test-project: PostalRegistry.Tests
      build-project: PostalRegistry.Projector
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-projections-syndication:
    name: Build Projections Syndication
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: postal-registry
      build-target: Containerize_ProjectionsSyndication
      image-file: pr-projections-syndication-image.tar
      image-name: projections-syndication
      test-project: PostalRegistry.Tests
      build-project: PostalRegistry.Projections.Syndication
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-producer:
    name: Build Producer
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: postal-registry
      build-target: Containerize_Producer
      image-file: pr-producer-image.tar
      image-name: producer
      test-project: PostalRegistry.Tests
      build-project: PostalRegistry.Producer
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  build-producer-snapshot-oslo:
    name: Build Producer Snapshot Oslo
    uses: Informatievlaanderen/build-pipeline/.github/workflows/build-image.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      registry: postal-registry
      build-target: Containerize_ProducerSnapshotOslo
      image-file: pr-producer-snapshot-oslo-image.tar
      image-name: producer-snapshot-oslo
      test-project: PostalRegistry.Tests
      build-project: PostalRegistry.Producer.Snapshot.Oslo
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  pack-api-legacy:
    name: Pack Api Legacy
    uses: Informatievlaanderen/build-pipeline/.github/workflows/pack.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      pack-file: Be.Vlaanderen.Basisregisters.PostalRegistry.Api.Legacy
      test-project: PostalRegistry.Tests
      build-project: PostalRegistry.Api.Legacy
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  pack-api-oslo:
    name: Pack Api Oslo
    uses: Informatievlaanderen/build-pipeline/.github/workflows/pack.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      pack-file: Be.Vlaanderen.Basisregisters.PostalRegistry.Api.Oslo
      test-project: PostalRegistry.Tests
      build-project: PostalRegistry.Api.Oslo
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  pack-api-extract:
    name: Pack Api Extract
    uses: Informatievlaanderen/build-pipeline/.github/workflows/pack.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      pack-file: Be.Vlaanderen.Basisregisters.PostalRegistry.Api.Extract
      test-project: PostalRegistry.Tests
      build-project: PostalRegistry.Api.Extract
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  pack-api-crab-import:
    name: Pack Api CrabImport
    uses: Informatievlaanderen/build-pipeline/.github/workflows/pack.yml@main
    needs: [ set-release-version ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    with:
      pack-file: Be.Vlaanderen.Basisregisters.PostalRegistry.Api.CrabImport
      test-project: PostalRegistry.Tests
      build-project: PostalRegistry.Api.CrabImport
      semver: ${{ needs.set-release-version.outputs.version }}
    secrets: inherit

  release:
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.set-release-version.outputs.version != 'none') }}
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [ set-release-version,
      pack-api-legacy,
      pack-api-oslo,
      pack-api-extract,
      pack-api-crab-import,
      build-api-legacy,
      build-api-oslo,
      build-api-extract,
      build-api-crab-import,
      build-projector,
      build-projections-syndication,
      build-producer,
      build-producer-snapshot-oslo ]
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
          persist-credentials: false

    - name: Cache NPM
      uses: actions/cache@v3
      env:
        cache-name: cache-npm
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
      shell: bash

    - name: Setup Node.js
      uses: actions/setup-node@v3

    - name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Node version
      shell: bash
      run: node --version

    - name: .NET version
      shell: bash
      run: dotnet --info

    - name: Python version
      shell: bash
      run: python --version

    - name: Install NPM dependencies
      shell: bash
      run: npm install --legacy-peer-deps

    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install requests markdown argparse

    - name: Download NuGet Api Legacy
      uses: actions/download-artifact@v3
      continue-on-error: false
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.PostalRegistry.Api.Legacy-${{ needs.set-release-version.outputs.version }}
        path: dist/nuget/

    - name: Download NuGet Api Oslo
      uses: actions/download-artifact@v3
      continue-on-error: false
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.PostalRegistry.Api.Oslo-${{ needs.set-release-version.outputs.version }}
        path: dist/nuget/

    - name: Download NuGet Api Extract
      uses: actions/download-artifact@v3
      continue-on-error: false
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.PostalRegistry.Api.Extract-${{ needs.set-release-version.outputs.version }}
        path: dist/nuget/

    - name: Download NuGet Api CrabImport
      uses: actions/download-artifact@v3
      continue-on-error: false
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.PostalRegistry.Api.CrabImport-${{ needs.set-release-version.outputs.version }}
        path: dist/nuget/

    - name: Run Semantic Release
      shell: bash
      run: npx semantic-release
      env:
        BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
        GITHUB_TOKEN: ${{ secrets.VBR_GIT_RELEASE_TOKEN }}
        GIT_COMMIT: ${{ github.sha }}
        GIT_USERNAME: ${{ secrets.VBR_GIT_USER }}
        GIT_AUTHOR_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_COMMITTER_NAME: ${{ secrets.VBR_GIT_USER }}
        GIT_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_AUTHOR_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}
        GIT_COMMITTER_EMAIL: ${{ secrets.VBR_GIT_EMAIL }}

    - name: Set Release Version
      id: set-version
      run: |
        [ ! -f semver ] && echo none > semver
        echo $(cat semver)
        echo ::set-output name=version::$(cat semver)
        echo RELEASE_VERSION=$(cat semver) >> $GITHUB_ENV
      shell: bash

  publish_to_nuget:
    needs: [ release ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.release.outputs.version != 'none') }}
    name: Publish to NuGet
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ secrets.VBR_DOTNET_VERSION }}

    - name: .NET version
      shell: bash
      run: dotnet --info

    - name: Download NuGet package api-legacy
      uses: actions/download-artifact@v3
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.PostalRegistry.Api.Legacy-${{ needs.release.outputs.version }}
        path: ~/

    - name: Download NuGet package api-oslo
      uses: actions/download-artifact@v3
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.PostalRegistry.Api.Oslo-${{ needs.release.outputs.version }}
        path: ~/

    - name: Download NuGet package api-extract
      uses: actions/download-artifact@v3
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.PostalRegistry.Api.Extract-${{ needs.release.outputs.version }}
        path: ~/

    - name: Download NuGet package api-crab-import
      uses: actions/download-artifact@v3
      with:
        name: nuget-Be.Vlaanderen.Basisregisters.PostalRegistry.Api.CrabImport-${{ needs.release.outputs.version }}
        path: ~/

    - name: Publish packages to NuGet
      shell: bash
      run: |
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.PostalRegistry.Api.Legacy.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.PostalRegistry.Api.Oslo.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.PostalRegistry.Api.Extract.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
        dotnet nuget push ~/Be.Vlaanderen.Basisregisters.PostalRegistry.Api.CrabImport.$SEMVER.nupkg --source nuget.org --api-key $NUGET_API_KEY
      env:
        SEMVER: ${{  needs.release.outputs.version }}
        WORKSPACE: ${{ github.workspace }}
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

  publish_to_atlassian:
    needs: [ release ]
    if: ${{ (github.repository_owner == 'Informatievlaanderen') && (needs.release.outputs.version != 'none') }}
    name: Publish to Atlassian
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Parse repository name
        run: echo REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//") >> $GITHUB_ENV
        shell: bash

      - name: Cache Paket
        uses: actions/cache@v3
        env:
          cache-name: cache-paket
        with:
          path: packages
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('paket.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Cache Python
        uses: actions/cache@v3
        env:
          cache-name: cache-pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install requests markdown argparse

      - name: Publish to Confluence
        shell: bash
        run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-confluence.sh
        env:
          CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
          CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
          CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}

     # - name: Create Jira Release
     #   shell: bash
     #   run: ./packages/Be.Vlaanderen.Basisregisters.Build.Pipeline/Content/ci-jira.sh
     #   env:
     #     CONFLUENCE_TITLE: ${{ env.REPOSITORY_NAME }}
     #     CONFLUENCE_USERNAME: ${{ secrets.VBR_CONFLUENCE_USER }}
     #     CONFLUENCE_PASSWORD: ${{ secrets.VBR_CONFLUENCE_PASSWORD }}
     #     JIRA_PREFIX: Postal
     #     JIRA_PROJECT: GAWR
     #     JIRA_VERSION: ${{ needs.release.outputs.version }}

  push_images:
    if: needs.release.outputs.version != 'none'
    needs: [ release ]
    name: Push images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ['api-legacy', 'api-oslo', 'api-crab-import', 'api-extract', 'projections-syndication', 'projector', 'producer', 'producer-snapshot-oslo']
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_DEVOPS }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_DEVOPS }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1.5.3

      # Download artifact
      - name: Download artifact
        uses: actions/download-artifact@v3
        continue-on-error: false
        with:
          name: ${{ matrix.image }}-${{ needs.release.outputs.version }}
          path: ~/

      # Load artifact
      - name: Load artifact
        shell: bash
        run: |
          echo mr-$IMAGE-image.tar
          docker image load -i ~/mr-$IMAGE-image.tar
        env:
          IMAGE: ${{ matrix.image }}

      - name: Push artifacts to ECR
        shell: bash
        run: |
          echo $IMAGE:$SEMVER
          docker tag $BUILD_DOCKER_REGISTRY_TST/postal-registry/$IMAGE:$SEMVER $BUILD_DOCKER_REGISTRY/postal-registry/$IMAGE:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/postal-registry/$IMAGE:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_DEVOPS_DOCKER_REGISTRY }}
          IMAGE: ${{ matrix.image }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

  push_images_to_staging:
    if: needs.release.outputs.version != 'none'
    needs: [ release ]
    name: Push images to Staging
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ['api-legacy', 'api-oslo', 'api-crab-import', 'api-extract', 'projections-syndication', 'projector', 'producer', 'producer-snapshot-oslo']
    steps:
      - name: Configure AWS credentials (Staging)
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR (Staging)
        uses: aws-actions/amazon-ecr-login@v1.5.3

      # Download artifact
      - name: Download artifact
        uses: actions/download-artifact@v3
        continue-on-error: false
        with:
          name: ${{ matrix.image }}-${{ needs.release.outputs.version }}
          path: ~/

      # Load artifact
      - name: Load artifact
        shell: bash
        run: |
          echo pr-$IMAGE-image.tar
          docker image load -i ~/pr-$IMAGE-image.tar
        env:
          IMAGE: ${{ matrix.image }}

      - name: Push artifacts to ECR Staging
        shell: bash
        run: |
          echo $IMAGE:$SEMVER
          docker tag $BUILD_DOCKER_REGISTRY_TST/postal-registry/$IMAGE:$SEMVER $BUILD_DOCKER_REGISTRY/postal-registry/$IMAGE:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY/postal-registry/$IMAGE:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          BUILD_DOCKER_REGISTRY: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY }}
          IMAGE: ${{ matrix.image }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

  push_images_to_production:
    if: needs.release.outputs.version != 'none'
    needs: [ release ]
    name: Push images to Production
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ['api-legacy', 'api-oslo', 'api-crab-import', 'api-extract', 'projections-syndication', 'projector', 'producer', 'producer-snapshot-oslo']
    steps:
      - name: Configure AWS credentials (Production)
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_NEWPRD }}
          aws-secret-access-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_NEWPRD }}
          aws-region: ${{ secrets.VBR_AWS_REGION_PRD }}

      - name: Login to Amazon ECR (Production)
        uses: aws-actions/amazon-ecr-login@v1.5.3

      # Download artifact
      - name: Download artifact
        uses: actions/download-artifact@v3
        continue-on-error: false
        with:
          name: ${{ matrix.image }}-${{ needs.release.outputs.version }}
          path: ~/

      # Load artifact
      - name: Load artifact
        shell: bash
        run: |
          echo pr-$IMAGE-image.tar
          docker image load -i ~/pr-$IMAGE-image.tar
        env:
          IMAGE: ${{ matrix.image }}

      - name: Push artifacts to ECR Production
        shell: bash
        run: |
          echo $IMAGE:$SEMVER
          docker tag $BUILD_DOCKER_REGISTRY_TST/postal-registry/$IMAGE:$SEMVER $BUILD_DOCKER_REGISTRY_NEWPRD/postal-registry/$IMAGE:$SEMVER
          docker push $BUILD_DOCKER_REGISTRY_NEWPRD/postal-registry/$IMAGE:$SEMVER
        env:
          BUILD_DOCKER_REGISTRY_TST: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_TST }}
          BUILD_DOCKER_REGISTRY_NEWPRD: ${{ secrets.VBR_BUILD_DOCKER_REGISTRY_NEWPRD }}
          IMAGE: ${{ matrix.image }}
          SEMVER: ${{ needs.release.outputs.version }}
          WORKSPACE: ${{ github.workspace }}

  deploy_to_test_start_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ push_images ]
    name: Deploy to test started
    environment: test
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment started
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-dinosaur-dev'
        slack-message: Deployment of postal-registry to test has started
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}

  deploy_to_test:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ push_images, release ]
    name: Deploy to test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: ['postalapi', 'postalimportapi', 'postalprojections', 'postalproducer', 'postalproducersnapshotoslo']

    steps:
    - name: Deploy services
      env:
        BUILD_URL: ${{ vars.VBR_AWS_BUILD_API_DEVOPS }}/${{matrix.services}}
        STATUS_URL: ${{ vars.VBR_AWS_BUILD_STATUS_API_DEVOPS }}/${{matrix.services}}
      uses: informatievlaanderen/awscurl-polling-action/polling-action@main
      with:
          environment: test
          version: ${{ needs.release.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_ACCESS_KEY_ID_DEVOPS }}
          secret-key: ${{ secrets.VBR_AWS_SECRET_ACCESS_KEY_DEVOPS }}
          region: eu-west-1
          deploy-target: 'agb_ecs_service'
          interval: 2

    - name: Deploy services output
      shell: bash
      run: |
        echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
        echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
        echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deploy_to_test_finish_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_to_test ]
    name: Deploy to test finished
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment finished
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-dinosaur-dev'
        slack-message: Deployment of postal-registry to test has finished
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}

  deploy_to_staging_start_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ push_images_to_staging, deploy_to_test_finish_slack ]
    name: Deploy to staging started
    environment: stg
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment started
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-dinosaur-dev'
        slack-message: Deployment of postal-registry to staging has started
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}

  deploy_to_staging:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ push_images_to_staging, deploy_to_staging_start_slack, release ]
    name: Deploy to staging
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services: ['postal-registry-api', 'postal-registry-projections', 'postal-registry-producer', 'postal-registry-producer-snapshot-oslo']

    steps:
    - name: CD services
      env:
        BUILD_URL: ${{ secrets.VBR_AWS_BUILD_API }}/${{matrix.services}}
        STATUS_URL: ${{ secrets.VBR_AWS_BUILD_STATUS_API }}/${{matrix.services}}
      uses: informatievlaanderen/awscurl-polling-action/polling-action@main
      with:
          environment: stg
          version: ${{ needs.release.outputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID }}
          secret-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY }}
          region: eu-west-1
          interval: 2

    - name: output CD services
      shell: bash
      run: |
        echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
        echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
        echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deploy_to_staging_finish_slack:
    if: github.repository_owner == 'Informatievlaanderen'
    needs: [ deploy_to_staging ]
    name: Deploy to staging finished
    runs-on: ubuntu-latest

    steps:
    - name: Parse repository name
      run: echo REPOSITORY_NAME=$(echo ""$GITHUB_REPOSITORY"" | awk -F / '{print $2}' | sed -e ""s/:refs//"") >> $GITHUB_ENV
      shell: bash

    - name: Notify deployment finished
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: '#team-dinosaur-dev'
        slack-message: Deployment of postal-registry to staging has finished
      env:
        SLACK_BOT_TOKEN: ${{ secrets.VBR_SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ secrets.VBR_NOTIFIER_CHANNEL_NAME }}
        REPOSITORY_NAME: ${{ env.REPOSITORY_NAME }}